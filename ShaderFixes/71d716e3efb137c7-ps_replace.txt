// laser dot

cbuffer _Globals : register(b0)
{
  float4 m_hud_params : packoffset(c0);
}

cbuffer static_globals : register(b1)
{
  row_major float3x4 m_V : packoffset(c0);
  row_major float3x4 m_inv_V : packoffset(c3);
  row_major float4x4 m_P : packoffset(c6);
  row_major float4x4 m_VP : packoffset(c10);
  float4 timers : packoffset(c14);
  float4 fog_plane : packoffset(c15);
  float4 fog_params : packoffset(c16);
  float4 fog_color : packoffset(c17);
  float4 L_ambient : packoffset(c18);
  float3 L_sun_color : packoffset(c19);
  float3 L_sun_dir_w : packoffset(c20);
  float4 L_hemi_color : packoffset(c21);
  float3 eye_position : packoffset(c22);
  float4 pos_decompression_params : packoffset(c23);
  float4 screen_res : packoffset(c24);
  float3 L_sun_dir_e : packoffset(c25);
  float4 parallax : packoffset(c26);
  float4 rain_params : packoffset(c27);
  float4 pp_img_corrections : packoffset(c28);
  float4 pp_img_cg : packoffset(c29);
  float4 actor_data : packoffset(c30);
}

Texture2D<float4> s_base : register(t0);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : TEXCOORD0,
  float4 v1 : TEXCOORD1,
  float3 v2 : TEXCOORD2,
  float4 v3 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float4 iniParams = IniParams.Load(0);

  r0.x = 2.22222233 * m_hud_params.z;
  r0.x = 1 / r0.x;
  r0.y = 0.000462962955 * screen_res.y;
  r0.x = r0.y * r0.x;
  r0.yz = -r0.xx * float2(384,384) + screen_res.xy;
  
  r0.y += stereo.x * screen_res.x;
  
  r0.x = 0.75 * r0.x;
  r0.yz = -r0.yz * float2(0.5,0.5) + v3.xy;
  r0.yz = float2(-0.5,-0.5) + r0.yz;
  r0.xy = r0.yz / r0.xx;
  r0.xy = float2(0.5,0.5) + r0.xy;
  r0.xy = (int2)r0.xy;
  r0.zw = (int2)v3.zz;
  r0.xyzw = s_base.Load(r0.xyz).xyzw;
  o0.xyzw = m_hud_params.xxxx * r0.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.3.16 on Mon Oct 18 20:08:37 2021
//
//
// Buffer Definitions:
//
// cbuffer $Globals
// {
//
//   float4 m_hud_params;               // Offset:    0 Size:    16
//
// }
//
// cbuffer static_globals
// {
//
//   row_major float3x4 m_V;            // Offset:    0 Size:    48 [unused]
//   row_major float3x4 m_inv_V;        // Offset:   48 Size:    48 [unused]
//   row_major float4x4 m_P;            // Offset:   96 Size:    64 [unused]
//   row_major float4x4 m_VP;           // Offset:  160 Size:    64 [unused]
//   float4 timers;                     // Offset:  224 Size:    16 [unused]
//   float4 fog_plane;                  // Offset:  240 Size:    16 [unused]
//   float4 fog_params;                 // Offset:  256 Size:    16 [unused]
//   float4 fog_color;                  // Offset:  272 Size:    16 [unused]
//   float4 L_ambient;                  // Offset:  288 Size:    16 [unused]
//   float3 L_sun_color;                // Offset:  304 Size:    12 [unused]
//   float3 L_sun_dir_w;                // Offset:  320 Size:    12 [unused]
//   float4 L_hemi_color;               // Offset:  336 Size:    16 [unused]
//   float3 eye_position;               // Offset:  352 Size:    12 [unused]
//   float4 pos_decompression_params;   // Offset:  368 Size:    16 [unused]
//   float4 screen_res;                 // Offset:  384 Size:    16
//   float3 L_sun_dir_e;                // Offset:  400 Size:    12 [unused]
//   float4 parallax;                   // Offset:  416 Size:    16 [unused]
//   float4 rain_params;                // Offset:  432 Size:    16 [unused]
//   float4 pp_img_corrections;         // Offset:  448 Size:    16 [unused]
//   float4 pp_img_cg;                  // Offset:  464 Size:    16 [unused]
//   float4 actor_data;                 // Offset:  480 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// s_base                            texture  float4          2d    0        1
// $Globals                          cbuffer      NA          NA    0        1
// static_globals                    cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float
// TEXCOORD                 1   xyzw        1     NONE   float
// TEXCOORD                 2   xyz         2     NONE   float
// SV_Position              0   xyzw        3      POS   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_constantbuffer CB1[25], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps_siv linear noperspective v3.xyz, position
dcl_output o0.xyzw
dcl_temps 1
mul r0.x, cb0[0].z, l(2.22222233)
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mul r0.y, cb1[24].y, l(0.000462962955)
mul r0.x, r0.x, r0.y
mad r0.yz, -r0.xxxx, l(0.000000, 384.000000, 384.000000, 0.000000), cb1[24].xxyx
mul r0.x, r0.x, l(0.750000)
mad r0.yz, -r0.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000), v3.xxyx
add r0.yz, r0.yyzy, l(0.000000, -0.500000, -0.500000, 0.000000)
div r0.xy, r0.yzyy, r0.xxxx
add r0.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
ftoi r0.xy, r0.xyxx
ftoi r0.zw, v3.zzzz
ld_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyzw, t0.xyzw
mul o0.xyzw, r0.xyzw, cb0[0].xxxx
ret
// Approximately 15 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
